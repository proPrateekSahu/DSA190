class Solution {
  public:
    void dfs(int i, vector<pair<int,int>> adj[],vector<int>&vis, stack<int>&st){
        vis[i]=1;
        for(auto it: adj[i]){
            if(vis[it.first]==0)
            dfs(it.first,adj,vis,st);
        }
        st.push(i);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
         vector<int>ans;
         vector<int>dist(N,1e6);
         dist[0]=0;
         vector<int>vis(N,0);
         vector<pair<int,int>>adj[N];
         for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
         }
         stack<int>st;
         for(int i=0;i<N;i++){
             if(!vis[i]){
                 dfs(i,adj,vis,st);
             }
         }
         while(!st.empty()){
             int node= st.top();
             st.pop();
             int srcDistance=dist[node];
             for(auto it: adj[node]){
                 int distSum=0;
                 distSum+=srcDistance + it.second;
                 dist[it.first]=min(dist[it.first],distSum);
                 
             }
             
         }
         for(int i=0;i<N;i++){
             if(dist[i]==1e6){
                 ans.push_back(-1);
             }
             else{
                 ans.push_back(dist[i]);
             }
         }
         return ans;
        // code here
    }
};
