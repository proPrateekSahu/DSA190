Prerequisite Tasks
______________________________________

class Solution {
public:
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    vector<int> adj[N];
	    vector<int>indeg(N,0);
	    for(int i=0;i<P;i++){
	        adj[prerequisites[i].second].push_back(prerequisites[i].first);
	        indeg[prerequisites[i].first]++;
	        
	        
	    }
	    queue<int>q;
	    for(int i=0;i<N;i++){
	        if(indeg[i]==0){
	            q.push(i);
	        }
	    }
	    int count=0;
	    while(!q.empty()){
	        int node= q.front();
	        
	        count++;
	        q.pop();
	        for(auto it : adj[node]){
	            indeg[it]--;
	            if(indeg[it]==0){
	                q.push(it);
	            }
	        }
	        
	        
	    }
	    if(count==N){
	        return true;
	    }
	    return false;
	   
	   
	    
	    
	    // Code here
	}
};


_______________________________________________________________________________________

//for order of topological sort
Course Schedule

class Solution
{
  public:
    vector<int> findOrder(int n, int m, vector<vector<int>> prerequisites) 
    {
        vector<int>ans;
        vector<int>adj[n];
        vector<int>indeg(n,0);
        for(int i=0;i<m;i++){
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
            indeg[prerequisites[i][0]]++;
        }
        
        queue<int>q;
        for(int i=0;i<n;i++){
            if(indeg[i]==0){
                q.push(i);
            }
        }
        while(!q.empty()){
            int node = q.front();
            ans.push_back(node);
            q.pop();
            for(auto it: adj[node]){
                indeg[it]--;
                if(indeg[it]==0){
                    q.push(it);
                }
            }
        }
        if(ans.size()==n){
            return ans;
        }
        else{
            vector<int>a;
            return a;
        }
        //code here
    }
};
