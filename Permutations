Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


__________________________________________________________________________________________________________________________





class Solution {
public:
    vector<vector<int>>v;
    //fun function here i denotes that elements upto i-1th index are fixed and we have to permute remaing elements
    void fun(vector<int>& nums,int i,vector<vector<int>>&ans){
        
        
        if(i==nums.size()){
            ans.push_back(nums);
            return;
        }
        //i-ith index of nums
        for(int k=i;k<nums.size();k++){
            swap(nums[k],nums[i]);
            fun(nums,i+1,ans);
            swap(nums[k],nums[i]);
        }
        
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        fun(nums,0,ans);
        return ans;

    }
};
