You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []

______________________________________________________________________________________________________________________________________________________________

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class cmp{
    public:
    bool operator ()(ListNode* a, ListNode* b){
        return a->val > b->val;
    }
};
class Solution {
public:
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,cmp>minh;
        int k=lists.size();
        ListNode* dummy= new ListNode(-1);
        ListNode* temp=dummy;
        for(int i=0;i<k;i++){
            if(lists[i]!=NULL)
            minh.push(lists[i]);
        }
        while(!minh.empty()){
            ListNode * x=minh.top();
            temp->next = x;
            temp=temp->next;
            minh.pop();
            if(x->next!=NULL){
                minh.push(x->next);
            }

            
        }
        return dummy->next;

    }
};
