struct Node{
    Node * links[26];
    bool flag=false;

    // checks if the reference trie is present or not
    //if reference trie is present then there exist a word which starts with this character
    bool containKey(char ch){
        return (links[ch-'a']!=NULL);
    }

    //creating reference trie
    //and connecting to the the character
    void put(char ch, Node* node){
        links[ch-'a']= node;
    }

    //to get the next node for traversal
    Node * get(char ch){
        return links[ch-'a'];
    }

    //setting flag to true at the end of word
    void setEnd(){
        flag= true;

    }

    //checking if the word is completed or not
    bool isEnd(){
        return flag;
    }

};

class Trie {
    private: 
    Node * root;
public:
    Trie() {
        //creating the new object
        root = new Node();

        
    }
    
    void insert(string word) {
        //inititalizing dummy node point to root initially
        Node * node = root;
        for(int i=0;i<word.length();i++){
            if(!node ->containKey(word[i])){
                node->put(word[i], new Node());
            }
            //moves to reference trie
            node = node ->get(word[i]);
        }
        node ->setEnd();
        
    }
    
    bool search(string word) {
        Node * node = root;
        for(int i=0;i<word.size();i++){
            if(!node ->containKey(word[i])){
                return false;
            }
            node = node -> get(word[i]);
        }
        return node->isEnd();
        
    }
    
    bool startsWith(string prefix) {
        Node * node = root;
        for(int i=0;i<prefix.size();i++){
            if(!node->containKey(prefix[i])){
                return false;
            }
            node = node->get(prefix[i]);
        }
        return true;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
