Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.


_____________________________________________________________________________________________________________________________________________________--


class Solution {
public:
    typedef pair<int,int>p;
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int>v;
        priority_queue <p, vector<p>,greater<p>>minh;
        int n=nums.size();
        unordered_map<int,int>m;
        for(int i=0;i<n;i++){
            m[nums[i]]++;
        }
        for(auto j: m){
            minh.push({j.second,j.first});
            if(minh.size()==k+1){
                minh.pop();
            }
            
        }
        while(minh.size()!=0){
                v.push_back(minh.top().second);
                minh.pop();
            }
        return v;
    }
};
