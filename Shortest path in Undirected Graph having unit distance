class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int>ans;
        vector<int> adj[N];
        vector<int>dist(N,1e9);
        vector<int>vis(N,0);
        queue<int>q;
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        dist[src]=0;
        q.push(src);
        vis[src]=1;
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it: adj[node]){
                if(vis[it]==0){
                    q.push(it);
                    vis[it]=1;
                }
                dist[it]=min(dist[it],dist[node]+1);
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==1e9){
                ans.push_back(-1);
            }
            else{
                ans.push_back(dist[i]);
            }
        }
        return ans;
        
        // code here
    }
};
