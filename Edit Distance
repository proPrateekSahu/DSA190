class Solution {
public:
    int solve(string &s1,string &s2,int i, int j){
        if(i==0 && j==0){
            return 0;
        }
        if(i==0){
            return j+1;
        }
        if(j==0){
            return i+1;
        }

        if(s1[i-1]==s2[j-1]){
            return solve(s1,s2,i-1,j-1);
        }
        else{
            int a= 1+ solve(s1,s2,i,j-1);//insertion from external to make it same thus j-- and i remains at its position
            int b= 1+solve(s1,s2,i-1,j);//delete that character from s1 thus i-- and j remains as it is
            int c= 1+ solve(s1,s2,i-1,j-1);//replace the character to make same thus i-- and j--;

            int mini= min(a,min(b,c));
            return mini;
        }
    }
    int minDistance(string word1, string word2) {
        int n=word1.length();
        int m=word2.length();


        return solve(word1,word2,n,m);
        
    }
};


_________________________________________________________________________________________________________________________________


class Solution {
public:
    int t[501][501];
    int solve(string &s1,string &s2,int i, int j){
        if(i==0 && j==0){
            return 0;
        }
        if(i==0){
            return j;
        }
        if(j==0){
            return i;
        }
        if(t[i][j]!=-1)return t[i][j];
        if(s1[i-1]==s2[j-1]){
            return t[i][j]=solve(s1,s2,i-1,j-1);
        }
        else{
            int a= 1+ solve(s1,s2,i,j-1);//insertion from external to make it same thus j-- and i remains at its position
            int b= 1+solve(s1,s2,i-1,j);//delete that character from s1 thus i-- and j remains as it is
            int c= 1+ solve(s1,s2,i-1,j-1);//replace the character to make same thus i-- and j--;

            int mini= min(a,min(b,c));
            return t[i][j]= mini;
        }
    }
    int minDistance(string word1, string word2) {
        memset(t,-1,sizeof(t));
        int n=word1.length();
        int m=word2.length();


        return solve(word1,word2,n,m);
        
    }
};

_____________________________________________________________________________________________________________________________________________________

class Solution {
public:
   
    int minDistance(string word1, string word2) {
        // memset(t,-1,sizeof(t));
        
        int n=word1.length();
        int m=word2.length();
        int t[n+1][m+1];

        for(int i=0;i<=n;i++){
            t[i][0]=i;
        }

        for(int j=0;j<=m;j++){
            t[0][j]=j;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    t[i][j]=t[i-1][j-1];
                }
                else{
                    int a= 1+ t[i][j-1];
                    int b= 1+ t[i-1][j];
                    int c= 1+ t[i-1][j-1];
                    t[i][j]=min(a,min(b,c));
                }
            }
        }
        return t[n][m];


        
        
    }
};

_________________________________________________________________________________________________________________________________________
Space optimization

class Solution {
public:
   
    int minDistance(string word1, string word2) {
        // memset(t,-1,sizeof(t));
        
        int n=word1.length();
        int m=word2.length();
        // int t[n+1][m+1];
        vector<int> prev(m+1,0);
        vector<int>cur(m+1,0);
        // int cur[m+1];
        

        // for(int i=0;i<=n;i++){
        //     t[i][0]=i;
        // }

        for(int j=0;j<=m;j++){
            // t[0][j]=j;
            prev[j]=j;
        }
        for(int i=1;i<=n;i++){
            cur[0]=i;
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    // t[i][j]=t[i-1][j-1];
                    cur[j]=prev[j-1];
                }
                else{
                    // int a= 1+ t[i][j-1];
                    // int b= 1+ t[i-1][j];
                    // int c= 1+ t[i-1][j-1];
                    int a= 1+ cur[j-1];
                    int b= 1+ prev[j];
                    int c= 1+ prev[j-1];
                    // t[i][j]=min(a,min(b,c));
                    cur[j]=min(a,min(b,c));

                    
                }
                
            }
            prev=cur;
        }
        // return t[n][m];
        return prev[m];



        
        
    }
};
