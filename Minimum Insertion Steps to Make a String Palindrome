class Solution {
    int dp[501][501];
public:

    int LCS(string a, string b, int m , int n){
        // if(i==0||j==0){
        //     return 0;
        // }
        // if(a[i-1]==b[j-1]){
        //     return 1+LCS(a,b,i-1,j-1);
        // }
        // else{
        //     return max(LCS(a,b,i-1,j),LCS(a,b,i,j-1));
        // }
        for(int i=1;i<m+1;i++ ){
            for(int j=1;j<n+1;j++){
                if(a[i-1]==b[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
    int minInsertions(string s) {
        memset(dp,0,sizeof(dp));
        int m=s.length();
        string b=s;
        reverse(b.begin(),b.end());
        return m-LCS(s,b,m,m);
    
    }
};
