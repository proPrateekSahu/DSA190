class Solution{
    public:
    string s1,s2;
    int res=INT_MIN;
    int dp[1001][1001];
    int solve(int n, int m){
        if(n<0|| m<0)return 0;
        
        if(dp[n][m]!=-1)return dp[n][m];
        if(s1[n]!=s2[m])return 0;
        if(s1[n]==s2[m]){
            return dp[n][m]=1+solve(n-1,m-1);
            
        }
        
        dp[n-1][m]=solve(n-1,m);
        dp[n][m-1]=solve(n,m-1);
        return 0;
    }
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        s1=S1;
        s2=S2;
         memset(dp,-1,sizeof(dp));
        solve(n-1,m-1);
       
        
        for(int i=0;i<=n-1;i++){
            for(int j=0;j<=m-1;j++){
                res=max(res,solve(i,j));
            }
        }
        return res;
        // your code here
    }
};


________________________________________________________________________________________________________________________________________________

class Solution{
    public:
    string s1,s2;
    int res=INT_MIN;
    int dp[1001][1001];
    int solve(int n, int m){
        if(n<0|| m<0)return 0;
        
        if(dp[n][m]!=-1)return dp[n][m];
        if(s1[n]!=s2[m])return 0;
        if(s1[n]==s2[m]){
            return dp[n][m]=1+solve(n-1,m-1);
            
        }
        
        dp[n-1][m]=solve(n-1,m);
        dp[n][m-1]=solve(n,m-1);
        return 0;
    }
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        s1=S1;
        s2=S2;
         memset(dp,-1,sizeof(dp));
        solve(n-1,m-1);
       
        
        for(int i=0;i<=n-1;i++){
            for(int j=0;j<=m-1;j++){
                res=max(res,solve(i,j));
            }
        }
        return res;
        // your code here
    }
};
