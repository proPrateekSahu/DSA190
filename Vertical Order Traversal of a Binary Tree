/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,multiset<int> > >m;
        queue<pair<TreeNode*,pair<int,int>>> q;
        vector<vector<int>>ans;
        if(root==NULL)return ans;
        
        q.push({root,{0,0}});

        while(!q.empty()){
            
            int size=q.size();
            
            for(int i=0;i<size;i++){
                auto temp= q.front();
                TreeNode* node= temp.first;
                int level= temp.second.second;
                int vertical= temp.second.first;
                m[vertical][level].insert(node->val);
                
                q.pop();

                if(node->left != NULL)
                q.push({node->left,{vertical -1 , level +1}});

                if(node->right != NULL)
                q.push({node->right,{vertical +1 , level +1}});

            }
            
        }

        for(auto k: m){//vertical : level,val
            vector<int>t;
            for(auto l : k.second){
                t.insert(t.end(),l.second.begin(),l.second.end());
            }
            ans.push_back(t);

        }
        return ans;
    }
};
