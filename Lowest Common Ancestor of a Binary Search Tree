Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode * solve(TreeNode* r, TreeNode * p, TreeNode * q){
        if(r==NULL)return r;
        if(r==p || r==q)return r;
        if((p->val < r->val && r->val < q->val)|| (p->val > r->val && r->val > q->val)){
            return r;
        }
        else if( p->val < r->val && q->val < r->val){
            return solve(r->left,p,q);
        }
        else{
            return solve(r->right,p,q);
        }
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return solve(root, p, q);
    }
};
