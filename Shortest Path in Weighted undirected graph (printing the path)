#define p pair<int,int>
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        
        //adjacent list
        vector<p> adj[n+1];
        for(int i=0;i<m;i++){
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
        }
        
        // Code here
        vector<int>ans;
        vector<int>dist(n+1,1e9);
        dist[1]=0;
        vector<int>parent(n+1);
        for(int i=0;i<n+1;i++){
            parent[i]=i;
        }
        priority_queue<p,vector<p>,greater<p>>minh;
        minh.push({0,1});
        while(!minh.empty()){
            auto weightVertex= minh.top();
            int weight= weightVertex.first;
            int vertex= weightVertex.second;
            minh.pop();
            for(auto it: adj[vertex]){
                if(weight + it.second < dist[it.first]){
                    dist[it.first]=weight + it.second;
                    parent[it.first]=vertex;
                    minh.push({dist[it.first],it.first});
                }
            }
        }
        int destin= n;
        ans.push_back(destin);
        while(parent[destin]!=destin){
            ans.push_back(parent[destin]);
            destin= parent[destin];
        }
        if(destin==1){
            reverse(ans.begin(),ans.end());
            return ans;
        }
        else{
            vector<int>a;
            a.push_back(-1);
            return a;
        }
    }
};
