
Given an array of integers A of size N and an integer B.
array A is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).
You are given a target value B to search. If found in the array, return its index, otherwise, return -1.
You may assume no duplicate exists in the array.

Input 1: 

A = [4, 5, 6, 7, 0, 1, 2, 3]
B = 4 
Input 2: 

A = [5, 17, 100, 3]
B = 6




int Solution::search(const vector<int> &nums, int B) {
    int low=0,high=nums.size()-1;
    while(low<=high){
        int mid=low + (high - low)/2;
        if(nums[mid]== B){
            return mid;
        }
        else if(nums[mid]> nums[low]){
            if(B < nums[mid] && B >=nums[low]){
                high=mid-1;
            }
            else{
                low = mid+1;
            }
        }
        else{
            if(B<=nums[high] && B> nums[mid]){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
    }
    return -1;
}
