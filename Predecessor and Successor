There is BST given with the root node with the key part as an integer only. You need to find the in-order successor and predecessor of a given key. If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Example 1:

Input:
        10
      /   \
     2    11
   /  \ 
  1    5
      /  \
     3    6
      \
       4
key = 8
Output: 
6 10
Explanation: 
In the given BST the inorder predecessor of 8 is 6 and inorder successor of 8 is 10.

___________________________________________________________________________________________________________________________________________________________


struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
class Solution
{
    void solve1(Node * root, Node* & suc, int key){
        if(root== NULL)return ;
        if(root->key > key){suc=root;
            solve1(root->left, suc, key);
        }
        else{
            solve1(root->right,suc,key);
        }
        
        
        
    }
    void solve2(Node* root, Node* & pre, int key){
        if(root==NULL)return ;
        if(root->key < key){
            pre=root;
            solve2(root->right, pre, key);
        }
        else{
            solve2(root->left, pre, key);
        }
    }
    public:
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        solve1(root, suc, key);
        solve2(root,pre,key);
        // solve(root, pre, suc, key);
        // Your code goes here
    }
};
