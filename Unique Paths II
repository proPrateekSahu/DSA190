int solve(int n , int m , vector<vector<int>>&mat,int mod,vector<vector<int>>&dp){
    if(n==0 && m==0){
        return 1;
    }
    if(m<0 || n< 0 || mat[n][m]==-1){
        return 0;
    }
    int left=0,up=0;
    
    if(dp[n][m]!=-1)return dp[n][m];
    left=solve(n,m-1,mat,mod,dp)%mod;

    up=solve(n-1,m,mat,mod,dp)%mod;

    return dp[n][m]= (left%mod + up%mod)%mod;
    
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    int mod=1e9+7;
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return solve(n-1,m-1,mat,mod,dp);
    
    // Write your code here
}



Space optimisation____________
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    int mod=(int)1e9+7;
    // vector<vector<int>>dp(n,vector<int>(m,-1));
    // return solve(n-1,m-1,mat,mod,dp);
    vector<int>prev(m,0);
    for(int i=0;i<n;i++){
        vector<int>temp(m,0);
        for(int j=0;j<m;j++){
            if(mat[i][j]==-1)temp[j]=0;
            else if(i==0 && j==0)temp[j]=1;
            else{
                int left=0,up=0;

                if(j-1>=0)
                left=(temp[j-1])%mod;
                
                up=(prev[j])%mod;

                temp[j]=((left % mod)+(up % mod)) % mod;

            }
        }
        prev=temp;
    }
    return prev[m-1]%mod;

    // Write your code here
}
