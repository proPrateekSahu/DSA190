#include <bits/stdc++.h> 
int solve(int m ,int n, vector<vector<int>>&dp){
	if(m==0 && n==0)return 1;
	if(m<0 || n<0){
		return 0;
	}
	if(dp[m][n]!=-1)return dp[m][n];
	int left=0,up=0;
	left = solve(m,n-1,dp);
	up= solve(m-1,n,dp);
	return dp[m][n]=left + up;
}
int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m,vector<int>(n,-1));
	return solve(m-1,n-1,dp);
	// Write your code here.
}

Tsbulation
int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m,vector<int>(n,-1));
	// return solve(m-1,n-1,dp);
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(i==0 && j== 0){dp[0][0]=1;}
			else{
				int left=0,up=0;
				if(j-1>=0)
				left=dp[i][j-1];
				if(i-1>=0)
				up=dp[i-1][j];
				dp[i][j]=left+up;

			}
			
		}
	}
	return dp[m-1][n-1];
	// Write your code here.
}


//Space optimisation

int uniquePaths(int m, int n) {


	vector<int>prev(n,0);
	for(int i=0;i<m;i++){
		vector<int>temp(n,0);
		for(int j=0;j<n;j++){
			if(i==0 && j== 0){temp[0]=1;}
			else{
				int left=0,up=0;
				if(j-1>=0)
				left=temp[j-1];
				if(i-1>=0)
				up=prev[j];
				temp[j]=left+up;

			}
			
		}
		prev=temp;
	}
	return prev[n-1];
	// Write your code here.
}
